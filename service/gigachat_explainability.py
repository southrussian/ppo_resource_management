from gigachat import GigaChat
from dotenv import load_dotenv
import os

load_dotenv()


def gigachat_explain(logs: str, agent_id: int) -> str:
    """
    Анализирует логи агента и генерирует объяснение его поведения с использованием модели GigaChat.

    Эта функция подключается к API GigaChat, формирует запрос на основе предоставленных логов и идентификатора агента,
    и возвращает текстовое объяснение, которое включает восстановление модели BDI агента, обобщение его поведения
    и выявление ключевых факторов, влияющих на его решения.

    Args:
        logs (str): Логи агента, содержащие данные о его действиях и состояниях.
        agent_id (int): Идентификатор агента, для которого требуется объяснение.

    Returns:
        str: Текстовое объяснение поведения агента на основе модели BDI.

    Notes:
        - Функция использует библиотеку dotenv для загрузки переменных окружения.
        - Подключение к GigaChat осуществляется с отключенной проверкой SSL-сертификатов.
        - Ответ от GigaChat обрабатывается и возвращается в виде строки.

    Example:
        logs = "Данные логов агента..."
        agent_id = 1
        explanation = gigachat_explain(logs, agent_id)
        print(explanation)
    """
    with GigaChat(credentials=os.getenv("SBER"), verify_ssl_certs=False, model='GigaChat') as giga:
        prompt = f"""
        Ты — интеллектуальный помощник для анализа поведения агентов системы планирования грузоперевозок на складе. 
        Твоя задача — анализировать данные интеллектуальных агентов при поиске ими оптимальных дней для 
        отправки грузов и анализировать их поведение по парадигме Belief-Desire-Intention. 
    
        Концепция BDI (Belief-Desire-Intention): Belief - для всех агетов - найти наиболее подходящий день для отправки груза, 
        Desire - какой день хочет занять агент, Intention - какое действие совершает агент.
        Каждый агент представляет клиента, а каждый заказ клиента характеризуется следующими дискретными характеристиками:
        1. Срочность: 1-3 (1 — низкая, 2 – средняя, 3 — высокая).
        2. Полнота информации: 0-1 (0 — неполная, 1 — полная).
        3. Сложность обслуживания: 0-1 (0 — низкая, 1 — высокая).
        
        Занятость мест: предыдущий/текущий/следующий день.

        Данные из логов: {logs}

        Инструкции:
        1. Восстанови модель BDI {agent_id + 1}-го агента на основе данных.
        2. Обобщи поведение агента:
           - Определи, были ли действия пассивными или активными.
           - Проанализируй динамику поведения за весь период.
        3. Выяви ключевые факторы, влияющие на решения агента.

        Требования:
        - Ответ должен быть в виде сплошного текста без форматирования.
        - Не используй (!!!) маркеры, заголовки или жирный шрифт.
        - Пиши кратко, но информативно.
        """

        response = giga.chat(prompt)
        print(response.choices[0].message.content)
        return str(response.choices[0].message.content)
